@model UL.Aria.Web.Common.Models.Project.TaskDocument

@{
	var id = "form_" + Guid.NewGuid().ToString();
}

<div class="ul-dialog">
	<div id="createTaskDocument" data-form-id="@id" data-mode="create">
		@using (Html.BeginForm("CreateDocumentFromTemplate", "Task", FormMethod.Post, new { Id = id, @class = "task-create-document", role = "form" }))
		{
			@Html.HiddenFor(x => x.AssetId)
			@Html.HiddenFor(x => x.ContainerId)
			@Html.HiddenFor(x => x.TaskId)
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
				<h3 id="myModalLabel">Create Document from Template</h3>
			</div>
			if (Model.Success)
			{
				<div class="modal-success" id="task-document" data-document-url="@Model.DocumentEditUrl" data-can-edit="@Model.CanEditDocumentOnline">
					<div class="modal-body">
						<i class="ul-icon-success"></i><span>Task Document has been successfully created.</span>
					</div>
					<div class="modal-footer">
						<button class="btn btn-info" data-dismiss="modal" aria-hidden="true" onclick=" UL.Refresh(); ">Dismiss</button>
					</div>
				</div>
			}
			else
			{
				<div class="modal-body">
					<fieldset class="form-horizontal">
						@Helpers.ModalSubmitFix()
						<div class="control-group">

							<div class="left-col">

								@Html.LabelFor(model => model.DocumentTypeId, "Document Category")
								<div class="controls">
									@Html.DropDownListFor(model => model.DocumentTypeId, Model.DocumentTypes)
									@Html.DescriptionFor(x => x.Title)
									@Html.ValidationMessageFor(model => model.DocumentTypeId)
								</div>
							</div>

							<div class="right-col">
								@Html.LabelFor(model => model.Title)
								<div class="controls">
									@Html.EditorFor(model => model.Title)
									@Html.DescriptionFor(x => x.Title)
									@Html.ValidationMessageFor(model => model.Title)
								</div>
							</div>

						</div>

						<div class="control-group">
							<div class="left-col">
								@Html.LabelFor(model => model.Description, "Document Description")
								<div class="controls">
									@Html.EditorFor(model => model.Description)
									@Html.ValidationMessageFor(model => model.Description)
								</div>
							</div>
							<div class="right-col">


								<div class="radio-group inline">
									@Html.LabelFor(model => model.Permission)
									<div class="controls">
										@Html.RadioButtonListFor(m => m.Permission, Model.Permissions, new {@class = "inline"})
										@Html.DescriptionFor(x => x.Title)
										@Html.ValidationMessageFor(m => m.Permission)
									</div>
								</div>

								<div style="margin-top: 15px;">
									@Html.LabelFor(model => model.AssetId)
									<div class="controls">

										@Html.DisplayFor(model => model.AssetId)
									</div>
								</div>
							</div>



						</div>

						<div class="control-group">
							
							<div class="left-col">
								
								<div class="controls">
									@Html.EditorFor(m=>m.Overwrite)
								</div>
							</div>

						</div>
						@Html.ValidationSummary()

					</fieldset>
				</div>

				<div class="modal-footer">
					@*Put the submit button first so ENTER will submit rather than cancel*@
					<input type="submit" id="btnCreateDocument" class="btn pull-right btn-primary" value="Create Document" />
					<button class="btn pull-left" id="task-modal" data-dismiss="modal" aria-hidden="true">Cancel</button>
				</div>
			}
		}

	</div>
</div>

<script type="text/javascript">
	UL.BootstrapControls($(".ul-dialog"));
</script>