<#
.SYNOPSIS
    Give an account access to a certificate located in the local computer's personal certificate store
	 
.PARAMETER user
	The user or group to grant permissions to in the format domain\user.

.PARAMETER Subject
    The subject of the certificate.  Specify the subject in double quotes.  Example Subject:  CN=localhost, O=UL, OU=Aria, L=Northbrook, S=IL, C=US

.DESCRIPTION
    This can be used when a service (or the IIS app pool account) needs access to a certificate in the local computer's personal certificate store.
    If read permission is granted, then the user doesn't need to be an administrator to access the certificate.
#>
param (
[Parameter(Mandatory=$true)][string]$user,[Parameter(Mandatory=$true)][string]$Subject 
)Function GrantReadPermissionOnCertificate ($location, $user, $Subject){    Try    {	    #Get the thumbprint of a certificate using the Subject.	    # Make sure we work with the most recent certificate by sorting the certificates by Expiration date, just in case there are old expired certs still in the certificate store.               	$getCert = Get-ChildItem -Recurse Cert:\LocalMachine\My | Where-Object {$_.Subject -eq $Subject} | sort $_.NotAfter -Descending | select -first 1 -erroraction STOP		    $Thumbprint = $getCert.Thumbprint                Write-Host "Found thumbprint: $Thumbprint"		    #Give permissions to a particular user account to access (i.e. read only access) to this certificate by modifing the encrypted Private Key file corresponding to this certificate. 	    #Use the Thumbprint  as a filter.    	     $keyName=(((Get-ChildItem $location | Where-Object {$_.Thumbprint -like $Thumbprint}).PrivateKey).CspKeyContainerInfo).UniqueKeyContainerName	}    Catch    {        Write-Host "Error:  Unable to locate a certificate with the subject $($Subject)"        Exit    }	#All the certificates are located in this directory on the file system:	$keyPath = $Env:ProgramData +"\Microsoft\Crypto\RSA\MachineKeys\"	$fullPath=$keyPath+$keyName	    if (!(Test-Path $fullPath))    {        Write-Error "Error.  Can't locate full path of certificate file."        Exit    }	# Add READ permissions for the user 	#$acl=Get-Acl -Path $fullPath	$acl=(Get-Item $fullPath).GetAccessControl('Access')    if ($acl -eq $null)    {        Write-Error "Error retrieving ACL from certificate."        Exit    }	#$acl=(Get-Item $fullPath).GetAccessControl('Access') 	# Possible Values For File System Based Access Rights:    # ListDirectory, ReadData, WriteData     # CreateFiles, CreateDirectories, AppendData     # ReadExtendedAttributes, WriteExtendedAttributes, Traverse    # ExecuteFile, DeleteSubdirectoriesAndFiles, ReadAttributes     # WriteAttributes, Write, Delete     # ReadPermissions, Read, ReadAndExecute     # Modify, ChangePermissions, TakeOwnership    # Synchronize, FullControl		$permission = "Read"	$permissionType = "Allow"		$Ace = $user, $permission ,$permissionType		$accessRule=new-object System.Security.AccessControl.FileSystemAccessRule $Ace	$acl.AddAccessRule($accessRule)    Try    {	    Set-Acl $fullPath $acl        Write-Host "Successfully set the permissions on the certificate"    }    Catch    {        Write-Host "Error:  Unable to set permissions on the certificate"    }}#Display input parametersWrite-Host "User:  $User"Write-Host "Subject: $Subject"GrantReadPermissionOnCertificate -Location Cert:\LocalMachine\Root -User $user -Subject $Subject$location = Get-Item Cert:\LocalMachine\RootGrantReadPermissionOnCertificate -Location Cert:\LocalMachine\My -User $user -Subject $Subject