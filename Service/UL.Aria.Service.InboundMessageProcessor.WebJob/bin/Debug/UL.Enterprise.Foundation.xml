<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UL.Enterprise.Foundation</name>
    </assembly>
    <members>
        <member name="T:UL.Enterprise.Foundation.AssemblyUtility">
            <summary>
            Shortcuts around assembly version numbers
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.AssemblyUtility.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            Assembly creationg date time. Might not be the actual build time.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.AssemblyUtility.GetSourceControlBuildNumber(System.Reflection.Assembly)">
            <summary>
            Gets the source control build number.
            </summary>
            <param name="ass">The ass.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.AssemblyUtility.HasDebugFlag(System.Reflection.Assembly)">
            <summary>
            Determines whether [has debug flag] [the specified ass].
            </summary>
            <param name="ass">The ass.</param>
            <returns>
              <c>true</c> if [has debug flag] [the specified ass]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.AssemblyUtility.FormatVersion(System.Reflection.Assembly)">
            <summary>
            Formats the version as v[version][d|r]
            </summary>
            <param name="ass">The ass.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.AssemblyUtility.CallingAssembly">
            <summary>
            Gets the calling assembly version.
            </summary>
            <value>
            The calling assembly version.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.AssemblyUtility.CallingAssemblyVersion">
            <summary>
            Gets the assembly's AssemblyVersion number that calls this property.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.AssemblyUtility.CallingAssemblyFileVersion">
            <summary>
            Gets the assembly's AssemblyFileVersionAttribute that calls this property.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.AssemblyUtility.CallingAssemblySvnBuild">
            <summary>
            Gets the calling assembly SVN build.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.AssemblyUtility.CallingAssemblyLastBuildTime">
            <summary>
            Gets the internal assembly last build time.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Authorization.IPrincipalResolver">
            <summary>
                Interface defining methods for getting to current principal.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Authorization.IPrincipalResolver.Current">
            <summary>
                Gets or sets the current.
            </summary>
            <value>
                The current.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Authorization.IPrincipalResolver.UserId">
            <summary>
                Gets or sets the user id.
            </summary>
            <value>
                The user id.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile">
            <summary>
                Configuration for a cache profile that defines caching behavior.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile">
            <summary>
            Defines properties of cache configuration profiles.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.CalculateAbsoluteExpiration">
            <summary>
                Calculates the absolute expiration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.Key">
            <summary>
                Gets or sets the key.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.Enabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile"/> is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.AbsoluteExpiration">
            <summary>
                Gets the absolute expiration, or null.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.SlidingExpiration">
            <summary>
                Gets the sliding expiration, or Cache.NoSlidingExpiration.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheConfigurationProfile.Priority">
            <summary>
                Gets the priority.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.CalculateAbsoluteExpiration">
            <summary>
                Calculates the absolute expiration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.Key">
            <summary>
                Gets or sets the key.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.Enabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile"/> is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.AbsoluteExpiration">
            <summary>
                Gets the absolute expiration, or null.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.SlidingExpiration">
            <summary>
                Gets the sliding expiration, or Cache.NoSlidingExpiration.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheConfigurationProfile.Priority">
            <summary>
                Gets the priority.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager">
            <summary>
            Defines the interface of a configurationmanager for cache manager.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager.Profiles">
            <summary>
            Gets or sets the cache manager configuration.
            </summary>
            <value>
            The cache manager configuration.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager.Default">
            <summary>
            Gets the default profile.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager"/> class.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager.Profiles">
            <summary>
            Gets or sets the cache manager configuration.
            </summary>
            <value>
            The cache manager configuration.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager.Default">
            <summary>
            Gets the default profile.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationManager.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection">
            <summary>
                Configration section for cache manager.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection.Default">
            <summary>
                The default section.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection.Load(System.String)">
            <summary>
                Loads the specified section name.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection.Profiles">
            <summary>
                Gets the profiles.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection.Enabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:UL.Enterprise.Foundation.Caching.CacheManagerConfigurationSection"/> is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.CacheProfiles">
            <summary>
                Collection of Configuration elements for cache profiles.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheProfiles.CreateNewElement">
            <summary>
                When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
                A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheProfiles.Add(UL.Enterprise.Foundation.Caching.CacheConfigurationProfile)">
            <summary>
            Adds the specified profile.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.CacheProfiles.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
                Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
                The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.
            </param>
            <returns>
                An <see cref="T:System.Object" /> that acts as the key for the specified
                <see
                    cref="T:System.Configuration.ConfigurationElement" />
                .
            </returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheProfiles.Item(System.String)">
            <summary>
                Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <returns>The specified property, attribute, or child element</returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Caching.CacheProfiles.Item(System.Int32)">
            <summary>
                Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <returns>The specified property, attribute, or child element</returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Caching.WebCacheManager">
            <summary>
            Implements <see cref="T:UL.Enterprise.Foundation.Framework.ICacheManager"/> using <see cref="T:System.Web.Caching.Cache"/> as a backing cache.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Framework.ICacheManager">
            <summary>
                Defines operations for handling caching.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.ICacheManager.Get``1(System.String,System.Func{``0},System.String,System.Web.Caching.CacheDependency)">
            <summary>
            Gets the specified item from cache.
            If it is not found, executes <paramref name="loadFunction"/> to load the item from a provider,
            <see cref="M:UL.Enterprise.Foundation.Framework.ICacheManager.Put``1(System.String,``0,System.String,System.Web.Caching.CacheDependency)"/>s it into the cache and then returns it.
            If the item is not of <typeparamref name="T"/>, throws <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key of the item to Get.</param>
            <param name="loadFunction">The load function.</param>
            <param name="profile">The profile to use for determing cache lifetime if the item is retreived using the supplied
            <paramref name="loadFunction"/>
            . If null, uses default.</param>
            <param name="dependencies">The dependencies.</param>
            <returns>
            The item that matches <paramref name="key"/> or is loaded by <paramref name="loadFunction"/>. Null if not found either in cache or by
            <paramref name="loadFunction"/>
            .
            </returns>
            <exception cref="T:System.InvalidCastException">The item requested was not of <typeparamref name="T"/></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.ICacheManager.Put``1(System.String,``0,System.String,System.Web.Caching.CacheDependency)">
            <summary>
            Puts the specified item into the cache with the specified key.
            If an item already exists with the specified key, overwrites it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="profile">The profile to use for determing cache lifetime. If null, uses default.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.ICacheManager.Delete(System.String)">
            <summary>
                Removes the specified item by key.
                If the item specified by <paramref name="key" /> does not exist, does nothing.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.WebCacheManager.#ctor(UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager,System.Web.Caching.Cache)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Caching.WebCacheManager"/> class.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.WebCacheManager.#ctor(UL.Enterprise.Foundation.Caching.ICacheManagerConfigurationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Caching.WebCacheManager"/> class.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.WebCacheManager.Get``1(System.String,System.Func{``0},System.String,System.Web.Caching.CacheDependency)">
            <summary>
            Gets the specified item from cache.
            If it is not found, executes <paramref name="loadFunction"/> to load the item from a provider,
            <see cref="M:UL.Enterprise.Foundation.Framework.ICacheManager.Put``1(System.String,``0,System.String,System.Web.Caching.CacheDependency)"/>s it into the cache and then returns it.
            If the item is not of <typeparamref name="T"/>, throws <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key of the item to Get.</param>
            <param name="loadFunction">The load function.</param>
            <param name="profile">The profile to use for determing cache lifetime if the item is retreived using the supplied
            <paramref name="loadFunction"/>
            . If null, uses default.</param>
            <param name="dependencies">The dependencies.</param>
            <returns>
            The item that matches <paramref name="key"/> or is loaded by <paramref name="loadFunction"/>. Null if not found either in cache or by
            <paramref name="loadFunction"/>
            .
            </returns>
            <exception cref="T:System.InvalidCastException">The item requested was not of <typeparamref name="T"/></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.WebCacheManager.Put``1(System.String,``0,System.String,System.Web.Caching.CacheDependency)">
            <summary>
            Puts the specified item into the cache with the specified key.
            If an item already exists with the specified key, overwrites it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="profile">The profile to use for determing cache lifetime. If null, uses default.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Caching.WebCacheManager.Delete(System.String)">
            <summary>
                Removes the specified item by key.
                If the item specified by <paramref name="key" /> does not exist, does nothing.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Client.ClaimsEndpointBehavior">
            <summary>
              A wcf implementation that facilitates implmentation of a custom behavior.
              In this particular instance that claims mapping
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
                Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
                Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
                Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
                Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Client.ClaimsMessageInspector">
            <summary>
                This class facilitates piggy backing onto the WCF call via HTTP Headers (because we are use ing REST) and
                inject additional contectual information to be passed across the process boundry
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IClientMessageInspector#BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
                Enables inspection or modification of a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The WCF client object channel.</param>
            <returns>
                The object that is returned as the <paramref name="request " />argument of the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
                method. This is null if no correlation state is used.The best practice is to make this a
                <see
                    cref="T:System.Guid" />
                to ensure that no two <paramref name="request" /> objects are the same.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IClientMessageInspector#AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
                Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IParameterInspector#BeforeCall(System.String,System.Object[])">
            <summary>
                Called before client calls are sent and after service responses are returned.
            </summary>
            <param name="operationName">The name of the operation.</param>
            <param name="inputs">The objects passed to the method by the client.</param>
            <returns>
                The correlation state that is returned as the <paramref name="operationName" /> parameter in
                <see
                    cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
                . Return null if you do not intend to use correlation state.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IParameterInspector#AfterCall(System.String,System.Object[],System.Object,System.Object)">
            <summary>
                Called after client calls are returned and before service responses are sent.
            </summary>
            <param name="operationName">The name of the invoked operation.</param>
            <param name="outputs">Any output objects.</param>
            <param name="returnValue">The return value of the operation.</param>
            <param name="correlationState">
                Any correlation state returned from the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
                method, or null.
            </param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Client.CorrelationEndpointBehavior">
            <summary>
              A wcf implementation that facilitates implmentation of a custom behavior.
              In this particular instance that CorrelationId mapping
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
                Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
                Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
                Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
                Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Client.CorrelationMessageInspector">
            <summary>
                This class intercepts call before a call is made to a WCF service and allows for modification of the
                headers to piggy back additional contextual information. In this istance we are propogating
                Trace.CorrelationManager across to the Services side. This is to facilitate that logging will have a
                common identifier between the UI and the backend ... thus allowing for comprehensive understanding of
                what occurred
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IClientMessageInspector#BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
                Enables inspection or modification of a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The WCF client object channel.</param>
            <returns>
                The object that is returned as the <paramref name="request " />argument of the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
                method. This is null if no correlation state is used.The best practice is to make this a
                <see
                    cref="T:System.Guid" />
                to ensure that no two <paramref name="request" /> objects are the same.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IClientMessageInspector#AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
                Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IParameterInspector#BeforeCall(System.String,System.Object[])">
            <summary>
                Called before client calls are sent and after service responses are returned.
            </summary>
            <param name="operationName">The name of the operation.</param>
            <param name="inputs">The objects passed to the method by the client.</param>
            <returns>
                The correlation state that is returned as the <paramref name="operationName" /> parameter in
                <see
                    cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
                . Return null if you do not intend to use correlation state.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IParameterInspector#AfterCall(System.String,System.Object[],System.Object,System.Object)">
            <summary>
                Called after client calls are returned and before service responses are sent.
            </summary>
            <param name="operationName">The name of the invoked operation.</param>
            <param name="outputs">Any output objects.</param>
            <param name="returnValue">The return value of the operation.</param>
            <param name="correlationState">
                Any correlation state returned from the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
                method, or null.
            </param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1">
            <summary>
                Wrapper around WebChannelFactory to clean up after a channel faults
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1">
            <summary>
            Abstrat proxy for WCF services that manages low level calls.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Disposable">
            <summary>
              Represents a pattern for proper disposing of objects using the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <example>
              This example illustrates how to use the dispose pattern in an inherited class.
              <code>protected override void Dispose(bool disposing)
                {
                if(disposing)
                {
                //
                // Free the state of managed objects.
                //
                }
                //
                // Free the state of unmanaged objects. i.e. set large fields to null.
                //
                //
                // Don't forget to call the base class.
                //
                base.Dispose(disposing);
                }</code>
            </example>
            <remarks>
            </remarks>
        </member>
        <member name="F:UL.Enterprise.Foundation.Disposable._isDisposed">
            <summary>
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Disposable.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Disposable.Finalize">
            <summary>
              Destroys the current instance, which calls any finalization code.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Disposable.CheckIsDisposed">
            <summary>
              Checks whether the current instance is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The exception that is thrown when an operation is performed on a disposed object.</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Disposable.Dispose(System.Boolean)">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1.CloseProxy(System.ServiceModel.ICommunicationObject)">
            <summary>
            Closes the proxy.
            </summary>
            <param name="clientProxy">The client proxy.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1.ExecuteAction(System.Action)">
            <summary>
            Executes the action. Wrapper method to abstract away nitty gritty of making server calls.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1.ExecuteFetch``1(System.Func{``0})">
            <summary>
            Executes function provided, catching the known exception for "not found".
            Returns either the resut of fetch() or the default value for TModel if not found by service.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="fetch">The fetch.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Proxy.ServiceAgent`1.ClientProxy">
            <summary>
            Gets or sets the client proxy.
            </summary>
            <value>
            The client proxy.
            </value>
        </member>
        <member name="F:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1._proxyLock">
            <summary>
                The _proxy lock
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1._serviceProxyFactory">
            <summary>
                The _service proxy factory
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.#ctor(System.ServiceModel.ChannelFactory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1"/> class.
            </summary>
            <param name="serviceProxyFactory">The service proxy factory.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.RetrieveManagedProxy">
            <summary>
                Retrieves the managed proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.CloseManagedProxy">
            <summary>
                Closes the managed proxy.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.InitializeProxy">
            <summary>
                Initializes the proxy.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.GetDownloadWithHeadersInternal(System.Collections.Generic.IDictionary{System.String,System.String}@,System.Func{`0,System.IO.Stream})">
            <summary>
            Gets the download with headers.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Client.ServiceAgentManagedProxy`1.ClientProxy">
            <summary>
                Gets or sets the client proxy.
            </summary>
            <value>
                The client proxy.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Configuration.ConfigurationElementBase">
            <summary>
            Abstract base type for a ConfigurationElement
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Configuration.ConfigurationElementBase.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1">
            <summary>
                Abstract base collection for configuration elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.CreateNewElement">
            <summary>
                When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
                A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
                Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
                The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.
            </param>
            <returns>
                An <see cref="T:System.Object" /> that acts as the key for the specified
                <see
                    cref="T:System.Configuration.ConfigurationElement" />
                .
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.IndexOf(`0)">
            <summary>
                Indexes the of.
            </summary>
            <param name="T">The message listener configuration.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Add(`0)">
            <summary>
                Adds the specified message listener configuration.
            </summary>
            <param name="T">The message listener configuration.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
                Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <param name="element">
                The <see cref="T:System.Configuration.ConfigurationElement" /> to add.
            </param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Remove(`0)">
            <summary>
                Removes the specified message listener configuration.
            </summary>
            <param name="T">The message listener configuration.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
                Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Remove(System.String)">
            <summary>
                Removes the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.CollectionType">
            <summary>
                Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <returns>
                The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.
            </returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Item(System.Int32)">
            <summary>
                Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Configuration.ConfigurationElementCollectionBase`1.Item(System.String)">
            <summary>
                Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.DatabaseItemExistsException">
            <summary>
            Exception thrown when a database item already exists that matches the entity being saved.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.DatabaseItemExistsException"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.DatabaseItemExistsException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.DatabaseItemExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.DatabaseItemExistsException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.DbAction">
            <summary>
            Provides a bitwise enumeration of standard row level actions
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.DbAction.Insert">
            <summary>
            The insert
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.DbAction.Update">
            <summary>
            The update
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.DbAction.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.DbAction.HardDelete">
            <summary>
            The Hard delete
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.Extensions">
            <summary>
                Provides helper extensions
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.#cctor">
            <summary>
            Initializes the <see cref="T:UL.Enterprise.Foundation.Data.Extensions"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.GetValue``1(System.Data.IDataReader,System.String)">
            <summary>
                Gets the value for the ordinal specified
            </summary>
            <typeparam name="T">Type of ordinal</typeparam>
            <param name="r">The reader</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.ToDotNetType(System.Type)">
            <summary>
            Returns the equivlent DbType value matching the Type.        
            </summary>
            <param name="dotNetType">Type of the dot net.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.ToDotNetType(System.Data.DbType)">
            <summary>
             Returns the equivlent .Net Type matching the dbType.
             Note: Returns object for all complex types
            </summary>
            <param name="dbType">Type of the database.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.ToDotNetType(System.String)">
            <summary>
            To the type of the dot net.
            </summary>
            <param name="sqlServerDbTypeStr">The SQL server database type string.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.Extensions.ToDbSortDirection(UL.Enterprise.Foundation.Data.SortDirection)">
            <summary>
            Converst the sort direction to the db string equivalent.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IAssocationEntity">
            <summary>
            An Entity that is used for pure assocation between two primary entities.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IEntity.RecordAction">
            <summary>
            Gets the record action.
            </summary>
            <value>
            The record action.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IAssociationRepository">
            <summary>
            An interface for repositorys that manage assocation objects.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IRepository">
            <summary>
            Repository interface used to indidate that inherited interfaces have the responsiblity to act like a data repository.
            this interface declare any members and must remain that way for abstration purposes.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IAssociationRepository`1">
            <summary>
            An interface for repositorys that manage assocation objects of generic Type E
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IAssociationRepository`1.Save(System.Collections.Generic.IEnumerable{`0},System.Guid)">
            <summary>
            Updates the bulk.
            </summary>
            <param name="items">The items.</param>
            <param name="groupId">The group identifier.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IAssociationRepository`1.FetchGroup(System.Guid)">
            <summary>
            Fetches the group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryAssocatedRepository">
            <summary>
            Provies an interface for repostiories that manage objects that act in a combination as a primary entity and an assocation.
            The target entity that uses this interface is most likey a child in a one to may relationship with a parent entity.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryAssocatedRepository`1">
            <summary>
            Provies an interface for repostiories that manage objects of generic type E that act in a combination as a primary entity and an assocation.
            The target entity that uses this interface is most likey a child in a one to may relationship with a parent entity.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1">
            <summary>
            Provides an interface for repositories that manage primary entity types of generic type E.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository">
            <summary>
            Provides an interface for repositories that manage primary entity types.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1.Fetch(System.Guid)">
            <summary>
            Finds the entity by id.
            </summary>
            <param name="entityId">The car class id.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1.Save(`0,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="additionalParametersDelegate">additional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1.Save(System.Collections.Generic.IEnumerable{`0},System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="additionalParametersDelegate">additional parameters.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1.Delete(System.Guid)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entityId">The entity id.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IPrimaryEntityRepository`1.DefaultSearch(UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Defaults the search.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryAssocationEntity">
            <summary>
            An interface for an object that acks as a one to many child of a parent object.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IPrimaryEntity">
            <summary>
            An interface for a classifier that acts as a primary or root entity 
            in relation to other entities in the domain model.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IPrimaryEntity.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IRefinementItem">
            <summary>
            Provides an interface for a refinment item.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IRefinementItem.Count">
            <summary>
                Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IRefinementItem.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IRefinementItem.Token">
            <summary>
                Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.IRefinementItem.Value">
            <summary>
                Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchableAssocationRepository`1">
            <summary>
            Adds Search abilities to association repository interface.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ISearchableAssocationRepository`1.DefaultSearch(UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Defaults the search.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchCriteria">
            <summary>
            Provides an interface for a generalized Search Criteria classifier.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.StartIndex">
            <summary>
                Gets or sets the start index.
            </summary>
            <value>
                The start index.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.EndIndex">
            <summary>
                Gets or sets the end index.
            </summary>
            <value>
                The end index.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.Keyword">
            <summary>
                Gets or sets the keyword.
            </summary>
            <value>
                The keyword.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.SortBy">
            <summary>
                Gets or sets the sort by.
            </summary>
            <value>
                The sort by.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.SortDirection">
            <summary>
            Gets or sets the sort direction.
            </summary>
            <value>
            The sort direction.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.UserId">
            <summary>
                Gets or sets the user id.
            </summary>
            <value>
                The user id.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.CompanyId">
            <summary>
                Gets or sets the company id.
            </summary>
            <value>
                The company id.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.Refiners">
            <summary>
                Gets or sets the refiners.
            </summary>
            <value>The refiners.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.Filters">
            <summary>
                Gets or sets the filters.
            </summary>
            <value>
                The filters.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.IncludeDeletedRecords">
            <summary>
            Gets or sets a value indicating whether [include deleted records].
            </summary>
            <value>
            <c>true</c> if [include deleted records]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.FilterContainers">
            <summary>
            Gets or sets a value indicating whether [filter containers].
            </summary>
            <value>
              <c>true</c> if [filter containers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.Sorts">
            <summary>
            Gets or sets the sorts.
            </summary>
            <value>
            The sorts.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchCriteria.EntityTypeLabel">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchResult">
            <summary>
            Provides an interface for an object acting as a search result.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.Metadata">
            <summary>
            Gets or sets the metadata dictionary.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResult.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchResultSet">
            <summary>
            Provies a interface for a Search result set's ancillary information.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResultSet.Summary">
            <summary>
            Gets or sets the summary for this result set
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResultSet.SearchCriteria">
            <summary>
            Gets or sets the search criteria.
            </summary>
            <value>
            The search criteria.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResultSet.RefinerResults">
            <summary>
                Gets or sets the refiner results.
            </summary>
            <value>The refiner results.</value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchResultSet`1">
            <summary>
            Provides a typed Results collection
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchResultSet`1.Results">
            <summary>
            Gets or sets the results.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISearchSummary">
            <summary>
            Provides an interface for the summary of a search request.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchSummary.StartIndex">
            <summary>
                Gets or sets the index of the first result
            </summary>
            <value>
                The start index.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchSummary.EndIndex">
            <summary>
                Gets or sets the index of the last result returned
            </summary>
            <value>
                The end index.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISearchSummary.TotalResults">
            <summary>
                Gets or sets the total number of results
            </summary>
            <value>
                The total results.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ISort">
            <summary>
            
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISort.Order">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.ISort.FieldName">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException">
            <summary>
            Exception thrown when an item has already been removed.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException">
            <summary>
            Database item not found exception class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException.#ctor(System.String)">
            <summary>
            Mappings the exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Mappings the exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.DatabaseItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Mappings the exception.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.ItemAlreadyRemovedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.RepositoryCommon">
            <summary>
                Provides a common base class for all repository base types.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryCommon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.RepositoryCommon"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryCommon.ConstructObject``1(System.Data.IDataReader)">
            <summary>
            Constructs the object using dynamic mapping.
            NOTE: this function doesn't use predefined maps.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryCommon.ExecuteNonQueryCommand``1(System.Func{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand},``0,System.Action{System.Data.Common.DbCommand})">
            <summary>
                Executes the command.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="commandInitializer">The command initializer.</param>
            <param name="entity">The entity.</param>
            <param name="afterExecute">The after execute.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryCommon.ExecuteNonQueryCommand(System.Func{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand},System.Action{System.Data.Common.DbCommand})">
            <summary>
            Executes the command.
            </summary>
            <param name="commandInitializer">The command initializer.</param>
            <param name="afterExecute">The after execute.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryCommon.ExecuteReaderCommand``1(System.Func{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand},System.Func{System.Data.IDataReader,``0})">
            <summary>
                Executes the reader command.
            </summary>
            <typeparam name="T">Domain entity type</typeparam>
            <param name="InitializeCommandDelegate">The initialize command delegate.</param>
            <param name="ConstructEntityDelegate">The construct entity delegate.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.RepositoryCommon.Mapper">
            <summary>
            Gets the mapper.
            </summary>
            <value>
            The mapper.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.RepositoryPrimaryAssocatedEntityBase`5">
            <summary>
            Abstract Implementation of a Repository that manages Primary Entities associated entities.
            This category of entity is most likely a child of another object maintaining a one to many relationship between its parent and itself.
            </summary>
            <typeparam name="E">The Entity type</typeparam>
            <typeparam name="RS">The type of the SearchResultSet it uses.</typeparam>
            <typeparam name="S">The type of the Sort object.</typeparam>
            <typeparam name="RI">The type of the Refinement Item.</typeparam>
            <typeparam name="SM">The type of the SearchSummary.</typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5">
            <summary>
            Provides a base repository class for an entity that is used as a stand alone or root data item/object.
            </summary>
            <typeparam name="E"></typeparam>
            <typeparam name="RS">The type of the s.</typeparam>
            <typeparam name="S"></typeparam>
            <typeparam name="RI">The type of the i.</typeparam>
            <typeparam name="SM">The type of the m.</typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.TableRepositoryBase`1">
            <summary>
            Base class for a repository that relies on data tables for database integration.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.TableRepositoryBase`1"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.DefinePrimaryEntityIDataReaderMapping(UL.Enterprise.Foundation.Mapper.IMapperRegistry)">
            <summary>
            Defines the primary entity from data reader mapping.
            </summary>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.MapPrimaryEntityToDataReader(AutoMapper.IMappingExpression{System.Data.IDataReader,`0})">
            <summary>
            When implemented in dervided classes, alows direct mapping from the primary entity generic(E)
            to DataRow object.
            </summary>
            <param name="expressionChain">The expression chain.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.DefinePrimaryEntityDataRowMapping(UL.Enterprise.Foundation.Mapper.IMapperRegistry)">
            <summary>
            Maps the primary entity to a DataRow.
            When overridden in derived classes provides direct access to the mapper registry
            when for mapping primary entity.
            
            </summary>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.MapPrimaryEntityToDataRow(`0,System.Data.DataRow)">
            <summary>
            When implemented in dervided classes, alows direct mapping from the primary entity generic(E)
            to DataRow object.
            </summary>
            <param name="src">The source.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.DefineMappings(UL.Enterprise.Foundation.Mapper.IMapperRegistry)">
            <summary>
            Defines the object data reader mapping.
            This is for defining other maps for related tables,
            the Primary entity of type E is already automattically handled
            Use
            </summary>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.CreateDataTable">
            <summary>
            Creates the primary datatable for this repository.
            </summary>
            <returns>
            DataTable.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.CreateDataTable(System.String)">
            <summary>
            Creates the data table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>
            DataTable.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.InitializeSaveCommand``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Initializes the save command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <param name="db">The db.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.InitializeFetchCommand(System.Guid,Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Initializes the find command.
            </summary>
            <param name="entityId">The entity id.</param>
            <param name="db">The db.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.InitializeFetchGroupCommand(System.Guid,System.String,Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Initializes the fetch group command.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="groupParameterName">Name of the group parameter.</param>
            <param name="db">The database.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.ConstructEntity``1(System.Data.IDataReader)">
            <summary>
            Constructs the entity.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.SaveEntities``1(System.Collections.Generic.IEnumerable{``0},UL.Enterprise.Foundation.Data.DbAction,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entities and applies the record action to all items in the group.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <param name="recordAction">The record action.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.SaveEntities``1(System.Collections.Generic.IEnumerable{``0},System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.FetchEntityById``1(System.Guid,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Fetches the entity by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityId">The entity identifier.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.FetchEntitiesByGroupId``1(System.Guid,System.String,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Fetches the entity by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="groupId">The group identifier.</param>
            <param name="groupParameterName">Name of the group parameter.</param>
            <param name="additionalParametersDelegate">The additional parameters delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.AddSearchParameters(Microsoft.Practices.EnterpriseLibrary.Data.Database,UL.Enterprise.Foundation.Data.ISearchCriteria,System.Data.Common.DbCommand)">
            <summary>
            Adds the search parameters.
            </summary>
            <param name="db">The database.</param>
            <param name="searchCriteria">The search criteria.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.SearchEntity``5(UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Searches the specified search criteria.
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
            <typeparam name="RS">The type of the ISearchResultSet.</typeparam>
            <typeparam name="S">The type of the ISort</typeparam>
            <typeparam name="RI">The type of the IRefinementItem.</typeparam>
            <typeparam name="SM">The type of the ISearchSummary.</typeparam>
            <param name="searchCriteria">The search criteria.</param>
            <returns>
            ProjectTemplateSearchResultSet.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.InitializeSearchCommand``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Initializes the search command.
            </summary>
            <param name="db">The database.</param>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.ExecuteSearchCommand``4(System.Func{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand},System.Func{System.Data.IDataReader,UL.Enterprise.Foundation.Data.ISearchResultSet{``1}},System.Func{System.Data.IDataReader,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{UL.Enterprise.Foundation.Data.IRefinementItem}}})">
            <summary>
            Executes the reader command.
            </summary>
            <typeparam name="RS">The type of the search result set.</typeparam>
            <typeparam name="T">The type of the entity being search.</typeparam>
            <typeparam name="RI">The type of the IRefinementItem.</typeparam>
            <typeparam name="SM">The type of the ISearchSummary.</typeparam>
            <param name="InitializeCommandDelegate">The initialize command delegate.</param>
            <param name="ConstructSearchResultSetDelegate">The construct search result set delegate.</param>
            <param name="ConstructRefinersDelegate">The construct refiners delegate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.AddFilter(System.Data.Common.DbCommand,UL.Enterprise.Foundation.Data.ISearchCriteria,System.String,System.String)">
            <summary>
            Adds the filter.
            </summary>
            <param name="cmd">The command.</param>
            <param name="searchCriteria">The search criteria.</param>
            <param name="assetFieldName">Name of the asset field.</param>
            <param name="parameterName">Name of the parameter.</param>       
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.IdFieldName">
            <summary>
            Gets the name of the identifier field.
            </summary>
            <value>
            The name of the identifier field.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.TableRepositoryBase`1.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.Fetch(System.Guid)">
            <summary>
            Fetches the specified entity identifier.
            </summary>
            <param name="entityId">The entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.Save(`0,System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="additionalParametersDelegate">additional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.Save(System.Collections.Generic.IEnumerable{`0},System.Action{Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand})">
            <summary>
            Saves the specified entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="additionalParametersDelegate">additional parameters.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.Delete(System.Guid)">
            <summary>
            Removes the specified entity identifier.
            </summary>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.DefaultSearch(UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Defaults the search.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.MapPrimaryEntityToDataRow(`0,System.Data.DataRow)">
            <summary>
            Maps the primary entity to data row.
            </summary>
            <param name="src">The source.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryEntityBase`5.DefinePrimaryEntityIDataReaderMapping(UL.Enterprise.Foundation.Mapper.IMapperRegistry)">
            <summary>
            Defines the primary entity i data reader mapping.
            </summary>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryAssocatedEntityBase`5.Save(System.Collections.Generic.IEnumerable{`0},System.Guid)">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="groupId">The group identifier.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryPrimaryAssocatedEntityBase`5.FetchGroup(System.Guid)">
            <summary>
            Fetches the group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.RepositoryPrimaryAssocatedEntityBase`5.GroupParameterName">
            <summary>
            Gets the name of the group parameter.
            </summary>
            <value>
            The name of the group parameter.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.SortDirection.Ascending">
            <summary>
            The ascending direction
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Data.SortDirection.Descending">
            <summary>
            The Descending diretion
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.DateFormatter">
            <summary>
                Utility class to Parse() and ToString() dates while respecting the user's time zone
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.DateFormatter"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.#ctor(System.Globalization.CultureInfo,System.TimeZoneInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.DateFormatter"/> class.
            </summary>
            <param name="culture">The culture.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalString(System.DateTime,System.String)">
            <summary>
                Converts a UTC DateTime to the local (user's) time zone.
            </summary>
            <remarks>Local refers to the end user's time zone - not the servers.  The server's is referred to as 'current.'</remarks>
            <param name="utc">A DateTime representing a UTC time  (e.g. DateTime.UtcNow).</param>
            <param name="format">
                .NET format string.  For a list of format strings see
                http://msdn2.microsoft.com/en-us/library/8kb3ddd4.aspx
            </param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalString(System.Nullable{System.DateTime},System.String)">
            <summary>
                Converts the UTC date to the local string.
            </summary>
            <param name="utc">The UTC.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalString(System.DateTime)">
            <summary>
                Converts the UTC date to the local string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalString(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalString(System.Object)">
            <summary>
                Converts the UTC date to the local string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalStringFromSystem(System.DateTime)">
            <summary>
                Converts a machine-local time to the local (user's) time zone.
            </summary>
            <remarks>Local refers to the end user's time zone - not the servers.  The server's is referred to as 'current.'</remarks>
            <param name="machine">A DateTime representing this server's local timezone (e.g. DateTime.Now)</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalStringFromSystem(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local string from system.
            </summary>
            <param name="machine">The machine.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalShortDateString(System.DateTime)">
            <summary>
                Converts the UTC date to the local short date string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalShortDateString(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local short date string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalShortTimeString(System.DateTime)">
            <summary>
                Converts the UTC date to the local short time string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalShortTimeString(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local short time string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalLongDateString(System.DateTime)">
            <summary>
                Converts the UTC date to the local long date string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalLongDateString(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local long date string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalLongTimeString(System.DateTime)">
            <summary>
                Converts the UTC date to the local long time string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ToLocalLongTimeString(System.Nullable{System.DateTime})">
            <summary>
                Converts the UTC date to the local long time string.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ParseLocalDate(System.String)">
            <summary>
                Parses the local date.
            </summary>
            <param name="localDateTime">The user local date time.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.TryParseLocalDate(System.String,System.DateTime@,System.Boolean)">
            <summary>
                Tries the parse local date.
            </summary>
            <param name="userLocalDateTime">The user local date time.</param>
            <param name="dateTime">The UTC date time.</param>
            <param name="convertToUtc">
                if set to <c>true</c> converts the time to UTC.  Passing in false can be helpfull when dates
                do not include times.
            </param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.TryParseLocalDate(System.String,System.Nullable{System.DateTime}@,System.Boolean)">
            <summary>
                Tries the parse local date.
            </summary>
            <param name="userLocalDateTime">The user local date time.</param>
            <param name="dateTime">The UTC date time.</param>
            <param name="convertToUtc">
                if set to <c>true</c> converts the time to UTC.  Passing in false can be helpfull when dates
                do not include times.
            </param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ConvertTimeFromUtc(System.DateTime)">
            <summary>
                Converts the time from UTC to this instance's local time zone.
            </summary>
            <param name="utc">A UTC date, regardless of what the Kind property says.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ConvertTimeFromUtc(System.Nullable{System.DateTime})">
            <summary>
                Converts the time from UTC.
            </summary>
            <param name="utc">The UTC.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ConvertTimeToUtc(System.DateTime)">
            <summary>
                Converts the time from this instance's local time zone to UTC.
            </summary>
            <param name="userLocal">A time specified in this instance's time zone, regardless of the Kind property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateFormatter.ConvertTimeToUtc(System.Nullable{System.DateTime})">
            <summary>
                Converts the time to UTC.
            </summary>
            <param name="userLocal">The user local.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.DateFormatter.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.DateFormatter.TimeZone">
            <summary>
                Gets the time zone.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.DateTimeUtility">
            <summary>
            Extenstion methods for working with <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateTimeUtility.DefaultToUtcNow(System.DateTime)">
            <summary>
            Defaults the supplied <see cref="T:System.DateTime"/>to UTC value for now.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.DateTimeUtility.DefaultToUtcNow(System.Nullable{System.DateTime})">
            <summary>
            Defaults the supplied <see cref="T:System.DateTime"/>to UTC value for now.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Domain.DomainEntity">
            <summary>
                Domain entity base class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.DomainEntity.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.DomainEntity"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.DomainEntity.#ctor(System.Nullable{System.Guid})">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.DomainEntity"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.DomainEntity.CoreEquals(System.Object)">
            <summary>
            Cores the equals, provides a by-pass to the real equals functionality
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.DomainEntity.CoreGetHashCode">
            <summary>
            Cores the get hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.DomainEntity.Equals(UL.Enterprise.Foundation.Domain.DomainEntity)">
            <summary>
                Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Domain.DomainEntity.Id">
            <summary>
                Gets or sets the id.
            </summary>
            <value>
                The id.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Domain.DomainEntity.RecordAction">
            <summary>
            Gets the record action.
            </summary>
            <value>
            The record action.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Domain.IValidator`1">
            <summary>
            Validator interace.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.IValidator`1.AssertIsValid(`0)">
            <summary>
            Asserts the instance is valid.
            </summary>
            <param name="entityToValidate">The entity to validate.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified entity to validate.
            </summary>
            <param name="entityToValidate">The entity to validate.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Domain.ValidationException">
            <summary>
            Validation exception class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.ValidationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.ValidationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Domain.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
              </PermissionSet>
        </member>
        <member name="P:UL.Enterprise.Foundation.Domain.ValidationException.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Domain.ValidatorBase`1">
            <summary>
            Validator base class.
            </summary>
            <typeparam name="T">Entity type to validate</typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidatorBase`1.AssertIsValid(`0)">
            <summary>
            Asserts the is valid.
            </summary>
            <param name="entityToValidate">The entity to validate.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidatorBase`1.Validate(`0)">
            <summary>
            Validates the specified entity to validate.
            </summary>
            <param name="entityToValidate">The entity to validate.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Domain.ValidatorBase`1.ValidateInstance(`0,System.Collections.Generic.List{System.String})">
            <summary>
            Validates the instance.
            </summary>
            <param name="entityToValidate">The entity to validate.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Domain.ValueEntity">
            <summary>
            Value entity class.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Framework.IOrderable">
            <summary>
            Interface IOrderable
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Framework.IOrderable.Ordinal">
            <summary>
            Gets the ordinal.
            </summary>
            <value>The ordinal.</value>
        </member>
        <member name="T:UL.Enterprise.Foundation.HashHelper">
            <summary>
            Class HashHelper.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.HashHelper.Compute(System.String,System.Byte[])">
            <summary>
            Computes the specified plain text.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="saltBytes">The salt bytes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.HashHelper.Verify(System.String,System.String)">
            <summary>
            Verifies the hash.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="hashValue">The hash value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.NativeMethods">
            <summary>
            Class NativeMethods.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.NativeMethods.Impersonation">
            <summary>
            Class Impersonation.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.NativeMethods.Impersonation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.NativeMethods.Impersonation"/> class.
            </summary>
            <param name="domain">The domain.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.NativeMethods.Impersonation.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.NativeMethods.Impersonation.SafeTokenHandle">
            <summary>
            Class SafeTokenHandle. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.NativeMethods.Impersonation.SafeTokenHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods">
            <summary>
                Dynamic sorting for class properties by string name extension methods.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.ThenBy``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.DynamicLinqOrderByExtensionMethods.ThenByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Linq.HierarchyExtensionMethods">
            <summary>
            Verious extension methods around hierarchial data structures
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Linq.HierarchyExtensionMethods.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the specified source using the selector to find children
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="childSelector">The children selector.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.FileLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.IFileLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.IFileLogger.Write(System.String)">
            <summary>
            Writes the specified line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.IFileLogger.GetLog``1(System.Func{System.String,``0})">
            <summary>
            Gets a list the log entries of the specified generic type using the supplied mapper delegate funciton.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="mapper">The mapper delegate function.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.IFileLogger.IsExistingFile">
            <summary>
            Gets a value indicating whether this instance is existing file.
            </summary>
            <value>
            <c>true</c> if this instance is existing file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileLogger.#ctor(UL.Enterprise.Foundation.Logging.IFileLocator,UL.Enterprise.Foundation.Logging.IFileStreamProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Logging.FileLogger"/> class.
            </summary>
            <param name="locator">The file locator object.</param>
            <param name="streamProvider">The stream provider.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileLogger.Write(System.String)">
            <summary>
            Writes the specified line.
            </summary>
            <param name="line">The line.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileLogger.GetLog``1(System.Func{System.String,``0})">
            <summary>
            Gets all lines.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileLogger.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.FileLogger.IsExistingFile">
            <summary>
            Gets a value indicating whether this instance is existing file.
            </summary>
            <value>
            <c>true</c> if this instance is existing file; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.FileStreamProvider">
            <summary>
            Provdes the an implemenatation of the IStreamProvider for File Streams.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.IFileStreamProvider">
            <summary>
            Provides an interface to retrieving a IO.Stream.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.IFileStreamProvider.GetStream(UL.Enterprise.Foundation.Logging.IFileLocator,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Gets the stream.
            </summary>
            <param name="locator">The locator.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileStreamProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Logging.FileStreamProvider"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.FileStreamProvider.GetStream(UL.Enterprise.Foundation.Logging.IFileLocator,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Gets the stream.
            </summary>
            <param name="locator">The locator.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.IFileLocator">
            <summary>
            
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.IFileLocator.Filename">
            <summary>
            Gets the filename.
            </summary>
            <value>
            The filename.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds">
            <summary>
            Event ids for log messages.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds.OutboundMessage">
            <summary>
            Event ids for log messages.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.OutboundMessage.ProjectStatusMessageStartPublished">
            <summary>
            The project status message published event
            
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.OutboundMessage.ProjectStatusMessageEndPublished">
            <summary>
            The project status message published event
            
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService">
            <summary>
            Event ids for log messages related to the message service.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessageReceived">
            <summary>
            The message received
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessagePublished">
            <summary>
            The message published
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessageReceivedProxy">
            <summary>
            The message received
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessagePublishedProxy">
            <summary>
            The message published
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessagePublishError">
            <summary>
            The project message publish error
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessagePublicationSkippedDueToStatus">
            <summary>
            The project message publication skipped
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.MessageService.ProjectMessagePublicationSkippedNotFromOrder">
            <summary>
            The project message publication skipped because project is not from order
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost">
            <summary>
            vent ids for log messages related to WcfProcessHost
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.MessageEvent">
            <summary>
            The message event
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.ProcessOpened">
            <summary>
            The process opened event
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.ProcessTerminated">
            <summary>
            The process terminated event
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.ProcessException">
            <summary>
            The process exception event
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.MessageException">
            <summary>
            The message exception
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.WcfProcessHost.ItemNotFound">
            <summary>
            The item not found
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds.CustomerPartyEvents">
            <summary>
            Event Ids for log messages related to CustomerParty
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.CustomerPartyEvents.CustomerPartyGeneralError">
            <summary>
            The general error
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.CustomerPartyEvents.InvalidPartySiteNumber">
            <summary>
            The invalid party site number
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogEventIds.ServiceExecutionManager">
            <summary>
            Event ids for <see cref="T:UL.Enterprise.Foundation.Logging.LogEventIds.ServiceExecutionManager"/>
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogEventIds.ServiceExecutionManager.ServiceExecutionManagerUnhandledException">
            <summary>
            The unhandled exception
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.LongUtility">
            <summary>
            Long related extension methods
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.LongUtility.FormatBytes(System.Int64)">
            <summary>
            Formats the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>Formatted string of how many bytes in the correct metric based on size.</returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.IRepositoryBase`1">
            <summary>
            Base repository interface.
            </summary>
            <typeparam name="TDomainEntity">Domain entity type.</typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IRepositoryBase`1.FindAll">
            <summary>
            Finds all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IRepositoryBase`1.FindById(System.Guid)">
            <summary>
            Finds the entity by id.
            </summary>
            <param name="entityId">The car class id.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IRepositoryBase`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">Author to add to the repository</param>
            <returns>Entity's system ID</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IRepositoryBase`1.Update(`0)">
            <summary>
            Update the specified entity.
            </summary>
            <param name="entity">Entity to update from the repository</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.IRepositoryBase`1.Remove(System.Guid)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entityId">The entity id.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.ITransactionFactory">
            <summary>
            Transaction factory strategy interface.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.ITransactionFactory.Create">
            <summary>
            Creates a transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.RepositoryBase`1">
            <summary>
                Repository base class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Data.RepositoryBase`1"/> class.
            </summary>
            <param name="dbIdFieldName">Name of the db id field.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.FindAll">
            <summary>
                Finds all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.FindById(System.Guid)">
            <summary>
                Finds the entity by id.
            </summary>
            <param name="entityId">The car class id.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.Add(`0)">
            <summary>
                Adds the specified entity.
            </summary>
            <param name="entity">Author to add to the repository</param>
            <returns>Entity's system ID</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.Update(`0)">
            <summary>
                Update the specified entity.
            </summary>
            <param name="entity">Entity to update from the repository</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.Remove(System.Guid)">
            <summary>
                Removes the specified entity.
            </summary>
            <param name="entityId">The entity id.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryBase`1.ConstructEntity(System.Data.IDataReader)">
            <summary>
                Constructs the entity.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.RepositoryBase`1.IdFieldName">
            <summary>
                Gets the name of the id field.
            </summary>
            <value>
                The name of the id field.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.TransactionFactory">
            <summary>
            Transaction factory class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.TransactionFactory.Create">
            <summary>
            Creates a transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.CertificateUtility">
            <summary>
            Class CertificateUtility
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.CertificateUtility.GetCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Get the certificate from a specific store/location/thumbprint.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.EnumUtility">
            <summary>
            Extension methods for Enums
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.EnumUtility.GetDisplayName(System.Enum)">
            <summary>
            Retrieve the DisplayAttribute's Name property on the enum if it exists, else it calls SpaceIt on the enum's name.
            </summary>
            <param name="en">The Enumeration</param>
            <returns>
            A string representing the friendly name
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.EnumUtility.GetValues``1">
            <summary>
            Gets the values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Framework.Guard">
            <summary>
            Helper class for validating method parameters
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if value is not
            greater than the expected minimum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="minimumValue">The minimum value.</param>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Determines whether [is less than] [the specified maximum value].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maximumValue">The maximum value.</param>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is
            null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is
            null or empty.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNotNullOrEmptyTrimmed(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is
            null or empty.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNull(System.Object,System.String)">
            <summary>
            Determines whether the specified parameter is null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.AreEqual``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the object is not
            equal to the expected value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expectedValue">The expected value.</param>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.AreSameType(System.Type,System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the types are not the same
            equal to the expected value./// 
            </summary>
            <param name="expectedValue">The expected value.</param>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNotEmptyGuid(System.Guid,System.String)">
            <summary>
            Determines whether [is not empty GUID] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsNullOrEmptyGuid(System.Nullable{System.Guid},System.String)">
            <summary>
            Ensures the guid is a null or empty unique identifier.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.Guard.IsEmptyGuid(System.Guid,System.String)">
            <summary>
            Ensures the guid is an empty unique identifier.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Framework.GuidHelper">
            <summary>
            Guid helper class
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Framework.GuidHelper.ToGuid(System.String)">
            <summary>
            To the GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Invalid identifier format.</exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogExtensions">
            <summary>
                Extenstions for LogMessage creation
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.LogExtensions.ToLogMessage(System.Exception,System.Int32,UL.Enterprise.Foundation.Logging.LogCategory,UL.Enterprise.Foundation.Logging.LogPriority,System.Diagnostics.TraceEventType)">
            <summary>
            To the log message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="id">The identifier.</param>
            <param name="category">The category.</param>
            <param name="priority">The priority.</param>
            <param name="severity">The severity.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogMessage">
            <summary>
            Log Message
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.LogMessage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Logging.LogMessage"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.LogMessage.#ctor(System.Int32,UL.Enterprise.Foundation.Logging.LogPriority,System.Diagnostics.TraceEventType,System.String,UL.Enterprise.Foundation.Logging.LogCategory[])">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Logging.LogMessage"/> class.
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="priority">The priority.</param>
            <param name="severity">The severity.</param>
            <param name="message">The message.</param>
            <param name="logCategories">The category.</param>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.LogCategories">
            <summary>
            Gets the log categories.
            </summary>
            <value>
            The log categories.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.LogPriority">
            <summary>
            Gets or sets the log priority.
            </summary>
            <value>
            The log priority.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Logging.LogMessage.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.ILogManager">
            <summary>
            Log Manager interface
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.ILogManager.Log(UL.Enterprise.Foundation.Logging.LogMessage)">
            <summary>
            Logs the specified log message.
            </summary>
            <param name="logMessage">The log message.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.ILogManager.ShouldLog(UL.Enterprise.Foundation.Logging.LogMessage)">
            <summary>
            Determies whether the supplied logMessage would be logged.
            </summary>
            <param name="logMessage">The log message.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogCategory">
            <summary>
            Categories availiable to be logged
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.System">
            <summary>
                General messages not related to a specific entity
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.AuditMessage">
            <summary>
                All messages which should be logged as audit messages.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Product">
            <summary>
                All product related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Order">
            <summary>
                All order related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.WorkOrder">
            <summary>
                All work order related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Search">
            <summary>
                All search related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.User">
            <summary>
                All user / profile / contact related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Authentication">
            <summary>
                All login/logout/authentication messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Company">
            <summary>
                Company related messages
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Profile">
            <summary>
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Container">
            <summary>
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.FileTransfer">
            <summary>
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Claim">
            <summary>
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.InboundOrderListener">
            <summary>
                The inbound order listener
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.InboundOrderMessageService">
            <summary>
                The inbound order message service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.InboundProcessor">
            <summary>
                The inbound processor
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Project">
            <summary>
                Project
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.PortalPage">
            <summary>
                A generic page on the portal, not specific to any business process
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ProductFamilyTemplateManager">
            <summary>
                Messages orginating with The product family template manager
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Help">
            <summary>
                The help
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ProductUploadImportManager">
            <summary>
                Messages orginating with the product upload import manager
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Legal">
            <summary>
                The legal pages of the portal, e.g. Terms and Conditions
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ExternalService">
            <summary>
                ExternalService
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ExternalRelay">
            <summary>
                ExternalRelay
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.SharepointContentService">
            <summary>
                The sharepoint content service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.MessageHost">
            <summary>
                The message host
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.OutboundMessage">
            <summary>
                The outbound message
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.MessageService">
            <summary>
                The message service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.MessageServiceProxy">
            <summary>
            The message service proxy
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ProductFamily">
            <summary>
            The product family
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ProductRelay">
            <summary>
            The product relay
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Export">
            <summary>
            The export
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.Request">
            <summary>
            The request
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.CustomerServiceProxy">
            <summary>
            The customer service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.CustomerServiceManager">
            <summary>
            The customer service Manager
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.InboundDocumentMessageService">
            <summary>
            The inbound document message service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.OutboundDocumentMessageService">
            <summary>
            The outbound document message service
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogCategory.ExternalDocumentService">
            <summary>
            The external document service
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogManager">
            <summary>
            Logs messages to the appropriate distributor(s).
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.LogManager.Log(UL.Enterprise.Foundation.Logging.LogMessage)">
            <summary>
            Logs the specified log message.
            </summary>
            <param name="logMessage">The log message.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Logging.LogManager.ShouldLog(UL.Enterprise.Foundation.Logging.LogMessage)">
            <summary>
            Determies whether the supplied logMessage would be logged.
            </summary>
            <param name="logMessage">The log message.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Logging.LogPriority">
            <summary>
            Log priorities
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogPriority.Critical">
            <summary>
            The highest priority.  This will typically jump to the front of the queue and be transationally logged.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogPriority.High">
            <summary>
            The high priority
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogPriority.Medium">
            <summary>
            The medium priority
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Logging.LogPriority.Low">
            <summary>
            The lowest priority
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.DataRowMapper">
            <summary>
            Object to DataRow AutoMapper IObjectMapper mapping strategy.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.DataRowMapper.IsMatch(AutoMapper.ResolutionContext)">
            <summary>
            Determines whether the specified context is match.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.DataRowMapper.Map(AutoMapper.ResolutionContext,AutoMapper.IMappingEngineRunner)">
            <summary>
            Maps the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="mapper">The mapper.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.DynamicMapperRegistry">
            <summary>
            Provides a partitioned Automapper registry and mapper class.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase">
            <summary>
            Class MapperEngineMapperRegistryBase.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.IMapperRegistry">
            <summary>
            Mapper registry interface.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.IMapperRegistry.Map``1(System.Object)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="DESTINATION">The type of the DESTINATION.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.IMapperRegistry.Map``2(``0,``1)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="SOURCE">The type of the SOURCE.</typeparam>
            <typeparam name="DESTINATION">The type of the DESTINATION.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.IMapperRegistry.InferMapAssignableFrom``1(System.Object)">
            <summary>
            Infers the map assignable from T where T is a base class
            and the destination is a derived DTO (used for KnownTypes in WCF)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.IMapperRegistry.Map``2(``0)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.IMapperRegistry.DynamicMap``2(``0)">
            <summary>
            Dynamics the map.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Mapper.IMapperRegistry.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.#ctor(AutoMapper.ConfigurationStore)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase"/> class.
            </summary>
            <param name="configStore">The configuration store.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.Map``1(System.Object)">
            <summary>
                Maps the specified source.
            </summary>
            <typeparam name="TDestination">The type of the Destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.Map``2(``0)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException">Mapping exception occurred</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.Map``2(``0,``1)">
            <summary>
                Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.InferMapAssignableFrom``1(System.Object)">
            <summary>
            Infers the map assignable from T where T is a base class
            and the destination is a derived DTO (used for KnownTypes in WCF)
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException">Mapping exception occurred</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>
            Constructs the services using.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.AssertConfigurationIsValid">
            <summary>
            Asserts the configuration is valid.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.CreateMap``2">
            <summary>
            Creates the map.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <returns>ConfigurationStore.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.DynamicMap``2(``0)">
            <summary>
            Dynamics the map.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Mapper.MapperEngineMapperRegistryBase.MappingEngine">
            <summary>
            Gets the mapping engine.
            </summary>
            <value>The mapping engine.</value>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.DynamicMapperRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.DynamicMapperRegistry"/> class.
            NOTE: this class cannot be used as a signleton due to mapping of the same object combination with
            ordinal based constructs such as IDataReader and DataRow, could vary from Repository to Repository.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Mapper.DynamicMapperRegistry.InitMapper">
            <summary>
            The initialize custom Mapping strategies into the configuration store.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException">
            <summary>
            Mapping exception.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.Exception.MappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.Exception.MappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.Exception.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.Exception.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Mapper.MapperRegistryBase">
            <summary>
                Mapper registry base class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.Map``1(System.Object)">
            <summary>
                Maps the specified source.
            </summary>
            <typeparam name="DESTINATION">The type of the DESTINATION.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.Map``2(``0)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException">Mapping exception occurred</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.Map``2(``0,``1)">
            <summary>
                Maps the specified source.
            </summary>
            <typeparam name="SOURCE">The type of the SOURCE.</typeparam>
            <typeparam name="DESTINATION">The type of the DESTINATION.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.InferMapAssignableFrom``1(System.Object)">
            <summary>
            Infers the map assignable from T where T is a base class
            and the destination is a derived DTO (used for KnownTypes in WCF)
            </summary>
            <typeparam name="DESTINATION">The type of the ESTINATION.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:UL.Enterprise.Foundation.Mapper.Exception.MappingException">Mapping exception occurred</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.DynamicMap``2(``0)">
            <summary>
            Maps the specified object using a dynamic Just in time mapping.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:UL.Enterprise.Foundation.Mapper.MapperRegistryBase.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.ParsingUtility">
            <summary>
                These are helpers to aid in parsing one type to another with the proper "TryParse" method
                to avoid throwing (and having to catch) unnecessary exceptions, all why providing a default value for the error
                case.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault``1(System.Object,``0)">
            <summary>
                Parses the or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault``1(System.String,``0)">
            <summary>
                Converts the given value to the desired type.  If the conversion fails, the defaultValue is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Int32)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Double)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Int64)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Boolean)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Nullable{System.Boolean})">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.Decimal)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.ParseOrDefault(System.String,System.DateTime)">
            <summary>
                Parses the or default.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
                Gets the value.
            </summary>
            <param name="node">The node.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="node">The node.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Xml.XPath.XPathNavigator,System.String,``0)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="node">The node.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.Boolean)">
            <summary>
                Gets the attribute's value.
            </summary>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <param name="nullOrEmptyValueYieldsDefault">if set to <c>true</c> [null or empty value yields default].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetAttributeValue``1(System.Xml.Linq.XElement,System.String,``0,System.Boolean)">
            <summary>
                Gets the attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <param name="nullOrEmptyValueYieldsDefault">if set to <c>true</c> [null or empty value yields default].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Xml.Linq.XAttribute,``0)">
            <summary>
                Gets the value of the given node and converts it to the given type.
                If the node is null or the type conversion fails, defaultValue will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="node">The node.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <param name="asXml">if set to <c>true</c> [as XML].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.SessionState.HttpSessionState,System.String,System.Int32)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.IDictionary,System.String,System.Double)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.IDictionary,System.String,System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Collections.IDictionary,System.String,``0)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.Double)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="emptyYieldsDefault">if set to <c>true</c> [empty yields default].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String,``0)">
            <summary>
                Gets the value.  This overload is to to disambiguate because Dictionary implements multiple interfaces we also
                have.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T">Type of key in dictionary</typeparam>
            <typeparam name="TU">Type of value in dictionary</typeparam>
            <typeparam name="TV">Type of desired return value</typeparam>
            <param name="hash">The hash.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="emptyYieldsDefault">if set to <c>true</c> [empty yields default].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.Int64)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.Int32)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.Decimal)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue(System.Web.HttpRequest,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.ParsingUtility.GetValue``1(System.Web.HttpRequest,System.String,``0)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="req">The req.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Converter">
            <summary>
                Class to convert one type to another using .NET code
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Converter.ChangeType``1(System.Object)">
            <summary>
                Changes the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Converter.ChangeType(System.Object,System.Type)">
            <summary>
                Changes the type.
            </summary>
            <param name="value">The value.</param>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Converter.RegisterTypeConverter``2">
            <summary>
                Registers the type converter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TC">The type of the C.</typeparam>
        </member>
        <member name="T:UL.Enterprise.Foundation.RegexUtility">
            <summary>
            Contains common regular expressions
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.RegexUtility.TelephoneNumberPattern">
            <summary>
            US and International telephone number Regex pattern.  Very loose.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.RegexUtility.TelephoneNumber">
            <summary>
            Validated US and International telephone numbers.  Very loose.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Base64Helper">
            <summary>
            Provides helper functions to encode/decode base 64 strings.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Base64Helper.EncodeTo64(System.String)">
            <summary>
            Encodes the to base 64.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Base64Helper.DecodeFrom64(System.String)">
            <summary>
            Decodes the string from base 64.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Data.RepositoryAssociationBase`5">
            <summary>
            Provides an abstract implementation of a repository for entity
            classifiers that act only in a many-to-many relationship with other entities.
            </summary>
            <typeparam name="E"></typeparam>
            <typeparam name="RS">The type of the s.</typeparam>
            <typeparam name="S"></typeparam>
            <typeparam name="RI">The type of the i.</typeparam>
            <typeparam name="SM">The type of the m.</typeparam>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryAssociationBase`5.Save(System.Collections.Generic.IEnumerable{`0},System.Guid)">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="groupId">The group identifier.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryAssociationBase`5.FetchGroup(System.Guid)">
            <summary>
            Fetches the group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Data.RepositoryAssociationBase`5.DefaultSearch(UL.Enterprise.Foundation.Data.ISearchCriteria)">
            <summary>
            Defaults the search.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="P:UL.Enterprise.Foundation.Data.RepositoryAssociationBase`5.GroupParameterName">
            <summary>
            Gets the name of the group parameter.
            </summary>
            <value>
            The name of the group parameter.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior">
            <summary>
            Claims service endpoint behavior.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior.#ctor(System.ServiceModel.Dispatcher.IDispatchMessageInspector)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior"/> class.
            </summary>
            <param name="serviceMessageInspector">The service message inspector.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector">
            <summary>
             Claims message inspector.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.ClaimsIdentifier">
            <summary>
            The claims identifier
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.#ctor(UL.Enterprise.Foundation.Authorization.IPrincipalResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector"/> class.
            </summary>
            <param name="principalResolver">The principal resolver.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IDispatchMessageInspector#AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
                Called after an inbound message has been received but before the message is dispatched to the intended operation.
            </summary>
            <param name="request">The request message.</param>
            <param name="channel">The incoming channel.</param>
            <param name="instanceContext">The current service instance.</param>
            <returns>
                The object used to correlate state. This object is passed back in the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
                method.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.SerializeClaims(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            Serializes the claims.
            </summary>
            <param name="claims">The claims.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.DeserializeClaims(System.String)">
            <summary>
            Deserializes the claims.
            </summary>
            <param name="lexicalClaims">The lexical claims.</param>
            <returns>IList&lt;System.Security.Claims.Claim&gt;.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.BuildSecureMessage(System.String)">
            <summary>
            Builds the secure message.
            </summary>
            <param name="message">The message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.CalculateHash(System.String)">
            <summary>
            Calculates the hash.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.ParseSecureMessage(System.String)">
            <summary>
            Parses the secure message.
            </summary>
            <param name="secureMessage">The secure message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Claim.ClaimsMessageInspector.System#ServiceModel#Dispatcher#IDispatchMessageInspector#BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
                Called after the operation has returned but before the reply message is sent.
            </summary>
            <param name="reply">The reply message. This value is null if the operation is one way.</param>
            <param name="correlationState">
                The correlation object returned from the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
                method.
            </param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute">
            <summary>
            Provides an attribute for identifying services for Rest Registration.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute"/> class.
            </summary>
            <param name="restServiceName">Name of the rest service.</param>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AutoRegisterRestServiceAttribute.RestServiceName">
            <summary>
            Gets the name of the rest service to be exposed by the Service Host.
            </summary>
            <value>
            The name of the rest service.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.IRouteManager">
            <summary>
            Route manager interface.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.IRouteManager.RegisterRoute(System.Web.Routing.RouteCollection,System.String,UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory,System.Type)">
            <summary>
            Registers the route.
            </summary>
            <param name="routes">The routes.</param>
            <param name="name">The name.</param>
            <param name="serviceHostFactory">The service host factory.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.RestServiceRegistar">
            <summary>
            Provides a method for auto registering Rest Services tagged with the AutoRegisterRestService Attribute.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.RestServiceRegistar.AutoRegisterRestServices(UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory,System.Reflection.Assembly,System.Web.Routing.RouteCollection,UL.Enterprise.Foundation.Service.Configuration.IRouteManager,System.Func{System.Type,System.Boolean},System.Collections.Generic.Dictionary{System.Type,System.String})">
            <summary>
            Automatics the register rest services.
            </summary>
            <param name="serviceHostFactory">The service host factory.</param>
            <param name="targetAssembly">The target assembly.</param>
            <param name="routes">The routes.</param>
            <param name="routeManager">The route manager.</param>
            <param name="filter">The filter.</param>
            <param name="serviceRegistrationOverrides">The service registration overrides.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.RouteManager">
            <summary>
            Route Manager classifier.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.RouteManager.RegisterRoute(System.Web.Routing.RouteCollection,System.String,UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory,System.Type)">
            <summary>
            Registers the route.
            </summary>
            <param name="routes">The routes.</param>
            <param name="name">The name.</param>
            <param name="serviceHostFactory">The service host factory.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.AzureSecurityMethod">
            <summary>
            Represents the different Security Modes of Azure
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Service.Configuration.AzureSecurityMethod.ACS">
            <summary>
            Shared Secret Security
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Service.Configuration.AzureSecurityMethod.SAS">
            <summary>
            Shared access signature.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSectionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>
            The created section handler object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSection">
            <summary>
            
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSection"/> class.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSection.Services">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceBusEnabled">
            <summary>
            Gets or sets a value indicating whether [service bus enabled].
            </summary>
            <value>
              <c>true</c> if [service bus enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceBusScheme">
            <summary>
            Gets or sets the service bus scheme.
            </summary>
            <value>
            The service bus scheme.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceBusNamespace">
            <summary>
            Gets or sets the service bus namespace.
            </summary>
            <value>
            The service bus namespace.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceBusIssuer">
            <summary>
            Gets or sets the service bus issuer.
            </summary>
            <value>
            The service bus issuer.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceBusKey">
            <summary>
            Gets or sets the service bus key.
            </summary>
            <value>
            The service bus key.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceContractType">
            <summary>
            Gets or sets the service interface.
            </summary>
            <value>
            The service interface.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceActivationType">
            <summary>
            Gets or sets the type of the service activation.
            </summary>
            <value>
            The type of the service activation.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.SecurityMethod">
            <summary>
            Gets or sets the security method.
            </summary>
            <value>
            The security method.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceContract">
            <summary>
            Gets or sets the type of the service cotract type string.
            </summary>
            <value>
            The type of the service contract.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem.ServiceActivation">
            <summary>
            Gets or sets the service activation type string.
            </summary>
            <value>
            The service activation.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior">
            <summary>
                Correlation endpoint behavior class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior.#ctor(System.ServiceModel.Dispatcher.IDispatchMessageInspector)">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior"/> class.
            </summary>
            <param name="serviceMessageInspector">The service message inspector.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
                Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
                Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
                Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
                Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Correlation.CorrelationMessageInspector">
            <summary>
            Correlation message inspector.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IDispatchMessageInspector#AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Called after an inbound message has been received but before the message is dispatched to the intended operation.
            </summary>
            <param name="request">The request message.</param>
            <param name="channel">The incoming channel.</param>
            <param name="instanceContext">The current service instance.</param>
            <returns>
            The object used to correlate state. This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Correlation.CorrelationMessageInspector.System#ServiceModel#Dispatcher#IDispatchMessageInspector#BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Called after the operation has returned but before the reply message is sent.
            </summary>
            <param name="reply">The reply message. This value is null if the operation is one way.</param>
            <param name="correlationState">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionErrorHandler">
            <summary>
            Handles errors which should be reverted to status codes.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionErrorHandler.#ctor(UL.Enterprise.Foundation.Service.ExceptionHandling.IHttpStatusProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionErrorHandler"/> class.
            </summary>
            <param name="httpStatusProvider">The HTTP status provider.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Enables the creation of a custom <see cref="T:System.ServiceModel.FaultException`1" /> that is returned from an exception in the course of a service method.
            </summary>
            <param name="error">The <see cref="T:System.Exception" /> object thrown in the course of the service operation.</param>
            <param name="version">The SOAP version of the message.</param>
            <param name="fault">The <see cref="T:System.ServiceModel.Channels.Message" /> object that is returned to the client, or service, in the duplex case.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionErrorHandler.HandleError(System.Exception)">
            <summary>
            Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.
            </summary>
            <param name="error">The exception thrown during processing.</param>
            <returns>
            true if Windows Communication Foundation (WCF) should not abort the session (if there is one) and instance context if the instance context is not <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior">
            <summary>
            Endpont behavior for properly handling
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior.#ctor(System.ServiceModel.Dispatcher.IErrorHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior"/> class.
            </summary>
            <param name="errorHandler">The error handler.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="endpoints">The service endpoints.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpExceptionServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The host that is currently being built.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusProvider">
            <summary>
            Implements operations for translating operations into http status information.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.ExceptionHandling.IHttpStatusProvider">
            <summary>
            Defines operations for translating operations into http status information.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.IHttpStatusProvider.GetStatusFromException(System.Exception,System.String)">
            <summary>
            Gets the status from exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="verb">The verb.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusProvider"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusProvider.GetStatusFromException(System.Exception,System.String)">
            <summary>
            Gets the status from the supplied exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="verb">the http verb being executed.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusInformation">
            <summary>
            Defines data points for http status.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusInformation.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusInformation.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.ExceptionHandling.HttpStatusInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Host.IProcessingManager">
            <summary>
            Base interface for service processing managers.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.IProcessingManager.Process(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Processes this instance.
            </summary>
            <param name="token">The token.</param>
            <param name="isContinuous">if set to <c>true</c> [is continuous].</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Host.IServiceHost">
            <summary>
            Service Interface
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.IServiceHost.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.IServiceHost.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Host.ServiceExecutionManager">
            <summary>
            Manages execution for windows services.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.ServiceExecutionManager.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Host.ServiceExecutionManager"/> class.
            </summary>
            <param name="instanceProvider">The instance provider.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.ServiceExecutionManager.Execute(System.String[])">
            <summary>
            Executes the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Host.WcfProcessHost">
            <summary>
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WcfProcessHost.#ctor(Microsoft.Practices.Unity.IUnityContainer,UL.Enterprise.Foundation.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Host.WcfProcessHost"/> class.
            </summary>
            <param name="unityContainer">The unity container.</param>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WcfProcessHost.Process(System.Threading.CancellationToken,System.Boolean)">
            <summary>
                Processes this instance.
            </summary>
            <param name="token">The token.</param>
            <param name="isContinuous">if set to <c>true</c> [is continuous].</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WcfProcessHost.ConfigureServiceHost(System.Type,System.Type,Microsoft.Practices.Unity.IUnityContainer,System.String,UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationItem)">
            <summary>
            Configures the service host.
            </summary>
            <param name="contract">The contract.</param>
            <param name="service">The service.</param>
            <param name="container">The container.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="configurationItem">The configuration item.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WcfProcessHost.ConfigureServiceHost(Microsoft.Practices.Unity.IUnityContainer,UL.Enterprise.Foundation.Service.Configuration.AzureWcfProcessConfigurationSection)">
            <summary>
            Configures the service host.
            </summary>
            <param name="container">The container.</param>
            <param name="azureConfig">The azure configuration.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost">
            <summary>
            Host for Services.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.#ctor(UL.Enterprise.Foundation.Service.Host.IProcessingManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Host.IProcessingManager"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Host.IProcessingManager"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.Stop">
            <summary>
            Stops the executing service.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.OnStart(System.String[])">
            <summary>
            When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.
            </summary>
            <param name="args">Data passed by the start command.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.OnStop">
            <summary>
            When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Host.WindowsServiceHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Logging.ILogCategoryResolver">
            <summary>
            Defines interface for class which is able to resolve a log category based on entity which is the focus of the log message being created.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.ILogCategoryResolver.GetCategory(System.Type)">
            <summary>
            Gets the category.
            </summary>
            <param name="entity">The entity to use to resolve the log entry category.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior">
            <summary>
            Logging operation behavior class.
            </summary>
        </member>
        <member name="F:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior._logManager">
            <summary>
            The _log manager
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior.#ctor(UL.Enterprise.Foundation.Logging.ILogManager,UL.Enterprise.Foundation.Service.Logging.ILogCategoryResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior"/> class.
            </summary>
            <param name="logManager">The log manager.</param>
            <param name="logCategoryResolver">The log category resolver.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="clientOperation">The run-time object that exposes customization properties for the operation described by
            <paramref name="operationDescription" />
            .</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by
            <paramref name="operationDescription" />
            .</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker">
            <summary>
                Allows for interception of wcf methods to log information transparently
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,UL.Enterprise.Foundation.Logging.ILogManager,UL.Enterprise.Foundation.Service.Logging.ILogCategoryResolver)">
            <summary>
                Logging operation invoker class.
            </summary>
            <param name="operationInvoker"></param>
            <param name="logManager"></param>
            <param name="categoryResolver"></param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.AllocateInputs">
            <summary>
                Returns an <see cref="T:System.Array" /> of parameter objects.
            </summary>
            <returns>
                The parameters that are to be used as arguments to the operation.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
            <summary>
                Returns an object and a set of output objects from an instance and set of input objects.
            </summary>
            <returns>
                The return value.
            </returns>
            <param name="instance">The object to be invoked.</param>
            <param name="inputs">The inputs to the method.</param>
            <param name="outputs">The outputs from the method.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
                An asynchronous implementation of the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" />
                method.
            </summary>
            <returns>
                A <see cref="T:System.IAsyncResult" /> used to complete the asynchronous call.
            </returns>
            <param name="instance">The object to be invoked.</param>
            <param name="inputs">The inputs to the method.</param>
            <param name="callback">The asynchronous callback object.</param>
            <param name="state">Associated state data.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
            <summary>
                The asynchronous end method.
            </summary>
            <returns>
                The return value.
            </returns>
            <param name="instance">The object invoked.</param>
            <param name="outputs">The outputs from the method.</param>
            <param name="asyncResult">
                The <see cref="T:System.IAsyncResult" /> object.
            </param>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Logging.LoggingOperationInvoker.IsSynchronous">
            <summary>
                Gets a value that specifies whether the
                <see
                    cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" />
                or
                <see
                    cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" />
                method is called by the dispatcher.
            </summary>
            <returns>
                true if the dispatcher invokes the synchronous operation; otherwise, false.
            </returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.STS.CertificateUtil">
            <summary>
            Certificate utility class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CertificateUtil.GetCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Gets the certificate.
            </summary>
            <param name="name">The name.</param>
            <param name="location">The location.</param>
            <param name="subjectName">Name of the subject.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">
            </exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService">
            <summary>
            Custom security token service class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
            <summary>
            Gets a <see cref="T:System.IdentityModel.Scope"/> object that contains information about the relying party (RP) associated with the specified request (RST). You must override this method in your implementation of the <see cref="T:System.IdentityModel.SecurityTokenService"/> class.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal"/> that represents the client making the request.</param>
            <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"/> that represents the incoming request (RST).</param>
            <returns>
            A <see cref="T:System.IdentityModel.Scope"/> that encapsulates the RP information associated with the request.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService.GetCredentialsForAppliesTo(System.IdentityModel.Protocols.WSTrust.EndpointReference)">
            <summary>
            Gets the credentials for applies to.
            </summary>
            <param name="appliesTo">The applies to.</param>
            <returns></returns>
            <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
            AppliesTo must be supplied in the RST.
            or
            </exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CustomSecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
            <summary>
            When overridden in a derived class, this method returns a collection of output subjects to be included in the issued token.
            </summary>
            <param name="principal">A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> that represents the identity of the token requestor.</param>
            <param name="request">A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> that represents the security token request. This includes the request message as well as other client related information such as authorization context.</param>
            <param name="scope">The <see cref="T:System.IdentityModel.Scope" /> that contains information about the relying party associated with the request. This is the <see cref="T:System.IdentityModel.Scope" /> object that was returned by the <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> method.</param>
            <returns>
            A <see cref="T:System.Security.Claims.ClaimsIdentity" /> that contains the collection of claims that will be placed in the issued security token.
            </returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.STS.CustomerSecurityTokenServiceConfiguration">
            <summary>
            Custom security token service configuratino.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.STS.CustomerSecurityTokenServiceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.STS.CustomerSecurityTokenServiceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior">
            <summary>
            Unity contract behavior class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior.#ctor(System.ServiceModel.Dispatcher.IInstanceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior"/> class.
            </summary>
            <param name="instanceProvider">The instance provider.</param>
            <exception cref="T:System.ArgumentNullException">instanceProvider</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Configures any binding elements to support the contract behavior.
            </summary>
            <param name="contractDescription">The contract description to modify.</param>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across a contract.
            </summary>
            <param name="contractDescription">The contract description for which the extension is intended.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="clientRuntime">The client runtime.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            Implements a modification or extension of the client across a contract.
            </summary>
            <param name="contractDescription">The contract description to be modified.</param>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="dispatchRuntime">The dispatch runtime that controls service execution.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the contract and endpoint can support the contract behavior.
            </summary>
            <param name="contractDescription">The contract to validate.</param>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextExtension">
            <summary>
            Unity instance context extension.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextExtension.GetChildContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Gets the child container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextExtension.DisposeOfChildContainer">
            <summary>
            Disposes the of child container.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextExtension.Attach(System.ServiceModel.InstanceContext)">
            <summary>
            Attaches the specified owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextExtension.Detach(System.ServiceModel.InstanceContext)">
            <summary>
            Detaches the specified owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextInitializer">
            <summary>
            Unityt instance context intitializer
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceContextInitializer.Initialize(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Provides the ability to modify the newly created <see cref="T:System.ServiceModel.InstanceContext" /> object.
            </summary>
            <param name="instanceContext">The system-supplied instance context.</param>
            <param name="message">The message that triggered the creation of the instance context.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider">
            <summary>
            Unity instance provider class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="contractType">Type of the contract.</param>
            <exception cref="T:System.ArgumentNullException">
            container
            or
            contractType
            </exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.
            </summary>
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</param>
            <param name="message">The message that triggered the creation of a service object.</param>
            <returns>
            The service object.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.
            </summary>
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</param>
            <returns>
            A user-defined service object.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.
            </summary>
            <param name="instanceContext">The service's instance context.</param>
            <param name="instance">The service object to be recycled.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost">
            <summary>
                Unity service host.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Uri[])">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.AddEndpointBehaviors(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Adds the endpoint behaviors.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.ApplyOperationBehavior(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the operation behavior.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.ApplyContractBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the contract behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.ApplyServiceBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the service behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.OnOpening">
            <summary>
            Invoked during the transition of a communication object into the opening state.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost.SetupEndPoints">
            <summary>
            Sets up the end points.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory">
            <summary>
            Unity service host factory class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory"/> class.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.ConfigureContainer">
            <summary>
            Configures the container.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses and initializes it with specified data.
            </summary>
            <param name="constructorString">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase" /> instance being constructed by the factory.</param>
            <param name="baseAddresses">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.ConfigureHost(System.ServiceModel.ServiceHostBase)">
            <summary>
            Configures the host.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates the service host.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost">
            <summary>
                Unity service host.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Uri[])">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.AddEndpointBehaviors(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Adds the endpoint behaviors.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.ApplyOperationBehavior(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the operation behavior.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.ApplyContractBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the contract behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.ApplyServiceBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the service behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.OnOpening">
            <summary>
            Invoked during the transition of a communication object into the opening state.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHost.SetupEndPoints">
            <summary>
            Sets up the end points.
            </summary>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory">
            <summary>
            Unity service host factory class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.#ctor(Microsoft.Practices.Unity.UnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHostFactory"/> class.
            </summary>
            <param name="container">The unity container.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.ConfigureContainer">
            <summary>
            Configures the container.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses and initializes it with specified data.
            </summary>
            <param name="constructorString">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase" /> instance being constructed by the factory.</param>
            <param name="baseAddresses">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses.
            </returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.ConfigureHost(System.ServiceModel.ServiceHostBase)">
            <summary>
            Configures the host.
            </summary>
            <param name="serviceHost">The service host.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityStandardServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates the service host.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost">
            <summary>
            UnityWindowsServiceHost
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.#ctor(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Uri[])">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Service.Unity.UnityServiceHost"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.AddEndpointBehaviors(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Adds the endpoint behaviors.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.ApplyOperationBehavior(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the operation behavior.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.ApplyContractBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the contract behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.ApplyServiceBehaviors(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
                Applies the service behaviors.
            </summary>
            <param name="container">The container.</param>
            <remarks>Overrideable for testing</remarks>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.OnOpening">
            <summary>
            Invoked during the transition of a communication object into the opening state.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.SetupEndPoints">
            <summary>
            Sets up the end points.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.Unity.UnityWindowsServiceHost.ActivationType">
            <summary>
            Gets the the activation type of the services.
            </summary>
            <value>
            The type of the activation.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase">
            <summary>
            Class WorkerRoleEntryPoint.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.OnStart">
            <summary>
            Called when [start].
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.OnStop">
            <summary>
            Called when [stop].
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.Execute(System.Threading.CancellationToken)">
            <summary>
            run as an asynchronous operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase"/> class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.CheckIsDisposed">
            <summary>
            Checks the is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Operations are not allowed on a disposed object.</exception>
        </member>
        <member name="M:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.AssemblyName">
            <summary>
            Gets the assembly name.
            </summary>
            <value>The assembly name.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.MessageId">
            <summary>
            Gets the message identifier.
            </summary>
            <value>The message identifier.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.LogCategory">
            <summary>
            Gets the log category.
            </summary>
            <value>The log category.</value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Service.WorkerRoleEntryPointBase.UnityRelayModule">
            <summary>
            Gets the unity relay module.
            </summary>
            <value>The unity relay module.</value>
        </member>
        <member name="T:UL.Enterprise.Foundation.StringUtility">
            <summary>
                String related extension methods
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.SpaceIt(System.String)">
            <summary>
                Spaces it, turns 'PascalCase' into 'Pascal Case' or 'camelCase' into 'camel Case'
                or "Other_Things.ThatProgrammers.Do" into "Other Things That Programmers Do"
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.ToUtc(System.String)">
            <summary>
                To the UTC.
            </summary>
            <param name="value">The value.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.Pluralize(System.String)">
            <summary>
            Pluralizes the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.SplitAndTrim(System.String,System.Char[])">
            <summary>
            Splits the provided value and trims it.
            </summary>
            <param name="value">The value.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.FromJson``1(System.String)">
            <summary>
            Froms the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.ToJson(System.Object)">
            <summary>
            To the json.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.ToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            To the json.
            </summary>
            <param name="data">The data.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.ToXml(System.Object)">
            <summary>
            Uses .NET's XmlSerializer to serialize the object as an XML string.
            </summary>
            <param name="o">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.ToXml(System.Object,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Serializes the object to XML string.
            </summary>
            <param name="o">The object.</param>
            <param name="s">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.FromXml``1(System.String)">
            <summary>
            Froms the XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="st">The st.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.StringUtility.SafeTrim(System.String)">
            <summary>
            Safely trims a string (handling null).
            </summary>
            <param name="val">The value.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.TypeExtensions">
            <summary>
            Provides extensions methods for the System.Reflection.Type Class.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.TypeExtensions.GetAssemblyQualifiedTypeName(System.Type,System.Boolean)">
            <summary>
            Gets the assembly qualified type name, excluding version, public key token and culture.
            </summary>
            <param name="type">The type.</param>
            <param name="nameOnly">if set to <c>true</c> Only the Type name is return, 
            otherwise string will included culture and public key token and still exculded the version.</param>
            <returns></returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Unity.ContainerBuilder">
            <summary>
            A classifer that ass Assembly level support for registering types to the UnityContainer followingg a fluent implementation pattern.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Unity.ContainerBuilder"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.RegisterAssemblyTypes(System.Reflection.Assembly)">
            <summary>
            Regesters the assembly types.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.Where(System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}})">
            <summary>
            Adds the specified expression as a filter to the container registation.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.IgnoreInterface(System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}})">
            <summary>
            Adds the specified expression as a filter for interfaces to ignore.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.SetActivatableClassifiersOnly">
            <summary>
            Sets type finder to excluded everything but classes that can be instantiated. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.IgnoreSystemInterfaces">
            <summary>
            Ignores interfaces in the System namespace when choosing which interfaces for each type to be registered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.OnlyIncludedInterface``1">
            <summary>
            When called requires that all types being 
            registered to implement the specified interface.
            </summary>
            <typeparam name="I"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.SetLifetimeManager(System.Type)">
            <summary>
            Sets the lifetime manager type to be used when registering.
            </summary>
            <param name="lifetimeManagerType">Type of the lifetime manager.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.SetLifetimeManager``1">
            <summary>
            Sets the lifetime manager type to be used.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.AsImplementedInterface">
            <summary>
            Registers the types using the first implemented interface in the types list.
            </summary>      
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.AsImplementedInterfaces">
            <summary>
            Registers the types by all of their implemented interface in the types list.
            </summary>     
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.IgnoreInterface``1">
            <summary>
            Ingores the interface.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.IgnoreInterface(System.Type)">
            <summary>
            Ingores the interface.
            </summary>
            <param name="ignoredInterfaceType">Type of the ignored interface.</param>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="cleanManagedAndNative"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.ContainerBuilder.UseAttributeForDuplicateNamingSchema``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Uses the attribute for duplicate naming schema.
            </summary>
            <typeparam name="T">The type of the attribute that contains the property form which the name 
            will be sources when adding items to the container.</typeparam>
            <param name="action">The member info lamda for selecting the property whose value will be used for the name.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="T:UL.Enterprise.Foundation.Unity.IUnityModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.IUnityModule.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Registers the specified unity container.
            </summary>
            <param name="unityContainer">The unity container.</param>
        </member>
        <member name="T:UL.Enterprise.Foundation.Unity.UnityBootStrapAttribute">
            <summary>
            Marks a class as being the Unity Bootstraping class.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Unity.UnityBootStrapAttribute.BootOrder">
            <summary>
            Gets or sets the boot order relative to all attributed classes with in the assembly.
            </summary>
            <value>
            The boot order.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Unity.UnityModuleManager">
            <summary>
            Manages the initialization of unity for each module registered.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:UL.Enterprise.Foundation.Unity.UnityModuleManager"/> class from being created.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.RegisterModule(UL.Enterprise.Foundation.Unity.IUnityModule)">
            <summary>
            Registers the module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.Resolve``1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.BootAssembly(System.Reflection.Assembly)">
            <summary>
            Probes assembly for all UnityBootStrap attributed classes and registers them.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Unity.UnityModuleManager.DisposeSingleton">
            <summary>
            Disposes this singleton instance.
            </summary>
        </member>
        <member name="P:UL.Enterprise.Foundation.Unity.UnityModuleManager.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>
            The current context.
            </value>
        </member>
        <member name="P:UL.Enterprise.Foundation.Unity.UnityModuleManager.Container">
            <summary>
            Gets the container.
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="T:UL.Enterprise.Foundation.Xslt.IXsltHelper">
            <summary>
                Interface IXsltHelper
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.IXsltHelper.Transform(System.String,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
                Transforms the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="xsltFileName">Name of the XSLT file.</param>
            <param name="xsltArgumentList">The XSLT argument list.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.IXsltHelper.Transform(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Xml.Xsl.XsltArgumentList)">
            <summary>
                Transforms the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="xsltFileName">Name of the XSLT file.</param>
            <param name="libraries">The libraries.</param>
            <param name="xsltArgumentList">The XSLT argument list.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:UL.Enterprise.Foundation.Xslt.XsltHelper">
            <summary>
                Class XsltHelper.
            </summary>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.XsltHelper.#ctor(UL.Enterprise.Foundation.Framework.ICacheManager)">
            <summary>
                Initializes a new instance of the <see cref="T:UL.Enterprise.Foundation.Xslt.XsltHelper"/> class.
            </summary>
            <param name="cacheManager">The cache manager.</param>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.XsltHelper.Transform(System.String,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
                Transforms the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="xsltFileName">Name of the XSLT file.</param>
            <param name="xsltArgumentList">The XSLT argument list.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.XsltHelper.Transform(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Xml.Xsl.XsltArgumentList)">
            <summary>
                Transforms the specified XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="xsltFileName">Name of the XSLT file.</param>
            <param name="libraries">The libraries.</param>
            <param name="xsltArgumentList">The XSLT argument list.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:UL.Enterprise.Foundation.Xslt.XsltHelper.XsltArgListFrom(System.String,System.Object[])">
            <summary>
                XSLTs the argument list from.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="argPairs">The argument pairs.</param>
            <returns>XsltArgumentList.</returns>
            <exception cref="T:System.ArgumentException">
                argPairs must contain pairs of data, thus there must be an even number of
                args.
            </exception>
        </member>
    </members>
</doc>
